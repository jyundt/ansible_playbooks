---
apiVersion: bitnami.com/v1alpha1
kind: SealedSecret
metadata:
  creationTimestamp: null
  name: guacamole
  namespace: default
spec:
  encryptedData:
    POSTGRES_PASSWORD: AgBPquI6LnXtXQOTbpjzJ7DCqEcnNbst0C1vWMCB7OR1x3A6jGy22rlGNlD8y5X/zjkEgN9hGfZQQ5VKXo3UJO7Je5XRRDxKLwGIDpQdL+qVGNaoU/jWxIOG+fYXt4x6oQpV4NaPaD+Asj7Nqu1M7okSnvHVUwdwaUDrmuqHevvz7PtRIgyzGZ/ygfJLupaOZilFNePomzplrgQOGT/adSR0OfS/zB9nZZgi76eBoglViA8wdVZfYSxpwZE82aAKF+GOllkyI/vPhRhxhpvUFHQ/bwmv4ZEVtvUBCfHMJVDE2jFB6f6cu0fWovWXHLCdveIemkCeadfh0aMkeNmqDdYr0xV0SYQKqgJpUPkEj4HZv5/PvCpPTf+xH6OZ5pa2wqSz0zXWtVIzDgLw+4C74RC0lzjXPvqcQ7ldEQmFd69pN+SQ1nHGDUrcDrApw1a276K6l5tP3ivIpStFo1NctUki4M2y4iaoRigGdjp3NHrUTNphKPjtynJ5yjDwzCqdPCW3TTcWotqgRmaMe4VQ07ly0QUUZl3HH48unXdhgHkf8UoMawP48mZewKbn29LPu6i/NacqVN+3Zt2lxuL50MyfGQrnBmFRs2TvMPyc/iX0df2Y5ZITKBOx4v/jIvF6E4Hwz4h+SrWCGyf2sOXD0PWFaR20ZXVaOiiDB5cLP6tazixwpt/rVtreLAmQ1u8+Ch8S/siUzf1HbEkwXUltHl+K/AV/63C6eRiHYrOabpz1og==
  template:
    metadata:
      creationTimestamp: null
      name: guacamole
      namespace: default
    type: Opaque
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: guacamole
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn-default
  resources:
    requests:
      storage: 1Gi
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: guacamole
  namespace: default
data:
  GUACD_HOSTNAME: localhost
  GUACD_PORT: "4822"
  POSTGRES_HOSTNAME: localhost
  POSTGRES_PORT: "5432"
  POSTGRES_USER: guacamole
  POSTGRES_DB: guacamole
  POSTGRES_DATABASE: guacamole
  PGDATA: /var/lib/postgresql/data/pgdata
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: guacamole-serverconf
  namespace: default
data:
  server.xml: |
    <?xml version="1.0" encoding="UTF-8"?>
    <!--
           Licensed to the Apache Software Foundation (ASF) under one or more
      contributor license agreements.  See the NOTICE file distributed with
      this work for additional information regarding copyright ownership.
      The ASF licenses this file to You under the Apache License, Version 2.0
      (the "License"); you may not use this file except in compliance with
      the License.  You may obtain a copy of the License at

          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    -->
    <!-- Note:  A "Server" is not itself a "Container", so you may not
              define subcomponents such as "Valves" at this level.
         Documentation at /docs/config/server.html
     -->
    <Server port="8005" shutdown="SHUTDOWN">
      <Listener className="org.apache.catalina.startup.VersionLoggerListener" />
      <!-- Security listener. Documentation at /docs/config/listeners.html
             <Listener className="org.apache.catalina.security.SecurityListener" />
      -->
      <!--APR library loader. Documentation at /docs/apr.html -->
      <Listener className="org.apache.catalina.core.AprLifecycleListener" SSLEngine="on" />
      <!-- Prevent memory leaks due to use of particular java/javax APIs-->
      <Listener className="org.apache.catalina.core.JreMemoryLeakPreventionListener" />
      <Listener className="org.apache.catalina.mbeans.GlobalResourcesLifecycleListener" />
      <Listener className="org.apache.catalina.core.ThreadLocalLeakPreventionListener" />

      <!-- Global JNDI resources
                  Documentation at /docs/jndi-resources-howto.html
      -->
      <GlobalNamingResources>
        <!-- Editable user database that can also be used by
                      UserDatabaseRealm to authenticate users
        -->
        <Resource name="UserDatabase" auth="Container"
                  type="org.apache.catalina.UserDatabase"
                  description="User database that can be updated and saved"
                  factory="org.apache.catalina.users.MemoryUserDatabaseFactory"
                  pathname="conf/tomcat-users.xml" />
      </GlobalNamingResources>

      <!-- A "Service" is a collection of one or more "Connectors" that share
                  a single "Container" Note:  A "Service" is not itself a "Container",
           so you may not define subcomponents such as "Valves" at this level.
           Documentation at /docs/config/service.html
       -->
      <Service name="Catalina">

        <!--The connectors can use a shared executor, you can define one or more named thread pools-->
        <!--
                 <Executor name="tomcatThreadPool" namePrefix="catalina-exec-"
            maxThreads="150" minSpareThreads="4"/>
        -->


        <!-- A "Connector" represents an endpoint by which requests are received
                      and responses are returned. Documentation at :
             Java HTTP Connector: /docs/config/http.html
             Java AJP  Connector: /docs/config/ajp.html
             APR (HTTP/AJP) Connector: /docs/apr.html
             Define a non-SSL/TLS HTTP/1.1 Connector on port 8080
        -->
        <Connector port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        <!-- A "Connector" using the shared thread pool-->
        <!--
                 <Connector executor="tomcatThreadPool"
                   port="8080" protocol="HTTP/1.1"
                   connectionTimeout="20000"
                   redirectPort="8443" />
        -->
        <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443
                      This connector uses the NIO implementation. The default
             SSLImplementation will depend on the presence of the APR/native
             library and the useOpenSSL attribute of the
             AprLifecycleListener.
             Either JSSE or OpenSSL style configuration may be used regardless of
             the SSLImplementation selected. JSSE style configuration is used below.
        -->
        <!--
                 <Connector port="8443" protocol="org.apache.coyote.http11.Http11NioProtocol"
                   maxThreads="150" SSLEnabled="true">
            <SSLHostConfig>
                <Certificate certificateKeystoreFile="conf/localhost-rsa.jks"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        -->
        <!-- Define a SSL/TLS HTTP/1.1 Connector on port 8443 with HTTP/2
                      This connector uses the APR/native implementation which always uses
             OpenSSL for TLS.
             Either JSSE or OpenSSL style configuration may be used. OpenSSL style
             configuration is used below.
        -->
        <!--
                 <Connector port="8443" protocol="org.apache.coyote.http11.Http11AprProtocol"
                   maxThreads="150" SSLEnabled="true" >
            <UpgradeProtocol className="org.apache.coyote.http2.Http2Protocol" />
            <SSLHostConfig>
                <Certificate certificateKeyFile="conf/localhost-rsa-key.pem"
                             certificateFile="conf/localhost-rsa-cert.pem"
                             certificateChainFile="conf/localhost-rsa-chain.pem"
                             type="RSA" />
            </SSLHostConfig>
        </Connector>
        -->

        <!-- Define an AJP 1.3 Connector on port 8009 -->
        <Connector port="8009" protocol="AJP/1.3" redirectPort="8443" />


        <!-- An Engine represents the entry point (within Catalina) that processes
                      every request.  The Engine implementation for Tomcat stand alone
             analyzes the HTTP headers included with the request, and passes them
             on to the appropriate Host (virtual host).
             Documentation at /docs/config/engine.html -->

        <!-- You should set jvmRoute to support load-balancing via AJP ie :
                 <Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1">
        -->
        <Engine name="Catalina" defaultHost="localhost">

          <!--For clustering, please take a look at documentation at:
                         /docs/cluster-howto.html  (simple how to)
              /docs/config/cluster.html (reference documentation) -->
          <!--
                     <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
          -->

          <!-- Use the LockOutRealm to prevent attempts to guess user passwords
                          via a brute-force attack -->
          <Realm className="org.apache.catalina.realm.LockOutRealm">
            <!-- This Realm uses the UserDatabase configured in the global JNDI
                              resources under the key "UserDatabase".  Any edits
                 that are performed against this UserDatabase are immediately
                 available for use by the Realm.  -->
            <Realm className="org.apache.catalina.realm.UserDatabaseRealm"
                   resourceName="UserDatabase"/>
          </Realm>

          <Host name="localhost"  appBase="webapps"
                unpackWARs="true" autoDeploy="true">

            <!-- SingleSignOn valve, share authentication between web applications
                              Documentation at: /docs/config/valve.html -->
            <!--
                         <Valve className="org.apache.catalina.authenticator.SingleSignOn" />
            -->

            <!-- Access log processes all example.
                              Documentation at: /docs/config/valve.html
                 Note: The pattern used is equivalent to using pattern="common" -->
            <Valve className="org.apache.catalina.valves.AccessLogValve" directory="logs"
                   prefix="localhost_access_log" suffix=".txt"
                   pattern="%h %l %u %t &quot;%r&quot; %s %b" />

            <Valve className="org.apache.catalina.valves.RemoteIpValve"
                   internalProxies="10.*"
                   remoteIpHeader="x-forwarded-for"
                   remoteIpProxiesHeader="x-forwarded-by"
                   protocolHeader="x-forwarded-proto" />

          </Host>
        </Engine>
      </Service>
    </Server>
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: guacamole
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: guacamole
  serviceName: "guacamole"
  template:
    metadata:
      labels:
        app: guacamole
    spec:
      containers:
      - image: guacamole/guacd:1.2.0
        imagePullPolicy: Always
        name: guacd
      - image: guacamole/guacamole:1.2.0
        imagePullPolicy: Always
        name: guacamole
        ports:
        - containerPort: 8080
        envFrom:
        - configMapRef:
            name: guacamole
        - secretRef:
            name: guacamole
        volumeMounts:
        - name: guacamole-serverconf
          mountPath: /usr/local/tomcat/conf/server.xml
          subPath: server.xml
      - image: postgres:12.2-alpine
        imagePullPolicy: Always
        name: guacamole-postgres
        livenessProbe:
          exec:
            command:
            - ls
            - /var/lib/postgresql/data/lost+found
          initialDelaySeconds: 5
          periodSeconds: 5
        volumeMounts:
        - name: guacamole
          mountPath: /var/lib/postgresql/data
        envFrom:
        - configMapRef:
            name: guacamole
        - secretRef:
            name: guacamole
      volumes:
      - name: guacamole-serverconf
        configMap:
          name: guacamole-serverconf
      - name: guacamole
        persistentVolumeClaim:
          claimName: guacamole
---
apiVersion: v1
kind: Service
metadata:
  namespace: default
  name: guacamole
spec:
  selector:
    app: guacamole
  ports:
  - name: guacamole
    port: 8080
    protocol: TCP
    targetPort: 8080
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: guacamole
  namespace: default
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/app-root: /guacamole
    nginx.ingress.kubernetes.io/auth-url: "https://authelia.kiski.co/api/verify"
    nginx.ingress.kubernetes.io/auth-signin: "https://authelia.kiski.co"
    cert-manager.io/cluster-issuer: "letsencrypt-production"
    nginx.ingress.kubernetes.io/proxy-buffering: "off"
spec:
  rules:
  - host: guac.kiski.co
    http:
      paths:
      - pathType: Prefix
        path: "/"
        backend:
          service:
            name: guacamole
            port:
              number: 8080
  tls:
  - hosts:
    - guac.kiski.co
    secretName: guac-kiski-co-tls
